---

- name: set system-depend variables
  ansible.builtin.include_vars:
    file: "{{ common_vars_dir }}/{{ ansible_os_family }}.yml"
  tags: system_config,system_init,system_install
  
- name: set common_hostname if it is not defined
  ansible.builtin.set_fact:
    common_hostname: "{{ ansible_hostname + '.' + common_domain_name }}"
  when: common_hostname is not defined
  tags: hostname_var_set

- name: set hostname
  ansible.builtin.hostname:
    name: "{{ common_hostname }}"
    use: systemd
  tags: system_init,hostname_init

- name: init of package management system
  include_tasks: "{{ ansible_pkg_mgr }}-init.yml"
  tags: system_config

- name: set locale and language settings
  become: yes
  become_user: root
  block:
    - name: create /etc/locale.gen
      ansible.builtin.template:
        src: "{{ common_etc_templates_path }}/locale.gen.j2"
        dest: "/etc/locale.gen"
      notify: rebuild locales
      tags: system_init,locale_init
    - name: create /etc/locale.conf
      ansible.builtin.template:
        src: "{{ common_etc_templates_path }}/locale.conf.j2"
        dest: "/etc/locale.conf"
      tags: system_init,locale_init
    - name: create /etc/vconsole.conf
      ansible.builtin.template:
        src: "{{ common_etc_templates_path }}/vconsole.conf.j2"
        dest: "/etc/vconsole.conf"
      tags: system_init,locale_init
  when: common_lang_init is defined and common_lang_init | bool
  tags: system_init,locale_init

- name: set time settings
  become: yes
  become_user: root
  block:
    - name: set timezone
      community.general.timezone:
        name: Europe/Moscow
      tags: system_init, timesync_init
    - name: set time sync parameters
      ansible.builtin.blockinfile:
        path: "{{ common_time_config_path }}"
        insertafter: "^\\[Time\\]"
        state: present
        block: |
          {% for tuple in common_timesync_param %}
          {{ tuple }}
          {% endfor %}
      notify: timesync_service restart
      tags: system_init, timesync_init
  when: common_timesync_init is defined and common_timesync_init | bool
  tags: system_init, timesync_init

- name: set systemd resolver settings
  become: yes
  become_user: root
  block:
    - name: set header of file
      ansible.builtin.blockinfile:
        path: "/etc/systemd/resolved.conf"
        insertbefore: "BOF"
        block: |
          # File /etc/systemd/resolved.conf
          # managed by ansible. You shouldn't edit it manually
      tags: system_init,resolver_init
    - name: Set DNS
      ansible.builtin.lineinfile:
        path: "/etc/systemd/resolved.conf"
        insertafter: "^#* *DNS="
        line: "DNS={{ common_dns }}"
        state: present
      tags: system_init,resolver_init
    - name: Set FallbackDNS
      ansible.builtin.lineinfile:
        path: "/etc/systemd/resolved.conf"
        insertafter: "^#* *FallbackDNS"
        line: "FallbackDNS={{ common_fallbackdns }}"
        state: present
      tags: system_init,resolver_init
    - name: Set Domains
      ansible.builtin.lineinfile:
        path: "/etc/systemd/resolved.conf"
        insertafter: "^#* *Domains"
        line: "Domains={{ common_domains }}"
        state: present
      tags: system_init,resolver_init
    - name: delete /etc/resolv.conf
      ansible.builtin.file:
        path: /etc/resolv.conf
        state: absent
      tags: system_init,resolver_init
    - name: set symlink /etc/resolv.conf -> /run/systemd/resolve/stub-resolv.conf
      ansible.builtin.file:
        path: /etc/resolv.conf
        src: /run/systemd/resolve/stub-resolv.conf
        state: link
      notify: resolver restart
      tags: system_init,resolver_init
  when: common_resolver == 'systemd-resolved' and common_resolver_init is defined and common_resolver_init | bool

- name: install all packages into system
  include_tasks: "{{ ansible_pkg_mgr }}.yml"
  tags: system_install

- name: create selfsigned SSL CA
  block:
    - name: create CA private key
      community.crypto.openssl_privatekey:
        path: "{{ common_ssl_CA_pkey }}"
        owner: 'root'
        group: 'root'
        mode: 0600
        return_content: true
      register: ssl_CA_pk_var
    - name: create CA Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ common_ssl_CA_csr }}"
        privatekey_path: "{{ common_ssl_CA_pkey }}"
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: true
        country_name: "{{ common_country_name }}"
        locality_name: "{{ common_ssl_locality_name | default(omit) }}"
        common_name: "{{ common_ssl_common_name }}"
        email_address: "{{ common_ssl_owner_email_address }}"
        organization_name: "{{ common_ssl_organization_name | default(omit) }}"
        organizational_unit_name: "{{ common_ssl_organizational_unit_name | default(omit) }}"
        subject_alt_name: "{{ common_ssl_subject_alt_name | default(omit) }}"
    - name: create selfsigned Certificate
      community.crypto.x509_certificate:
        path: "{{ common_ssl_CA }}"
        privatekey_path: "{{ common_ssl_CA_pkey }}"
        csr_path: "{{ common_ssl_CA_csr }}"
        provider: selfsigned
        return_content: yes
      register: ssl_CA_var
    - name: check if common_local_store directory exists
      ansible.builtin.file:
        path: "{{ common_local_store }}"
        state: directory
      delegate_to: 127.0.0.1
    - name: copy SSL CA to accessible place
      ansible.builtin.copy:
        dest: "{{ common_local_store }}/{{ common_domain_name }}-ssl-ca.pem"
        content: "{{ ssl_CA_var.certificate }}"
      delegate_to: 127.0.0.1
    - name: copy SSL CA private key to accessible place
      ansible.builtin.copy:
        dest: "{{ common_local_store }}/{{ common_domain_name }}-private.pem"
        content: "{{ ssl_CA_pk_var.privatekey }}"
      delegate_to: 127.0.0.1
  when: common_hostname == common_primary_dc
  tags: system_init,ssl_ca

- name: copy selfsigned SSL CA and PK to other hosts
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: root
  loop:
    - src: "{{ common_local_store }}/{{ common_domain_name }}-ssl-ca.pem"
      dest: "{{ common_ssl_CA }}"
      mode: "0644"
    - src: "{{ common_local_store }}/{{ common_domain_name }}-private.pem"
      dest: "{{ common_ssl_CA_pkey }}"
      mode: "0600"
  when: common_hostname != common_primary_dc
  tags: system_init,ssl_ca
