---
# generate and put ssh-keys on cluster hosts
- name: Get user info
  become: true
  become_user: root
  tags: ssh_keys
  ansible.builtin.user:
    name: "{{ common_user_sk }}"
    state: "present"
  register: user_info

- name: Check if ${HOME}/.ssh dir exists
  become: true
  become_user: root
  tags: ssh_keys
  ansible.builtin.file:
    path: "{{ user_info.home }}/.ssh"
    state: directory
    owner: "{{ common_user_sk }}"
    mode: "0700"

- name: Create temp dir for create ssh keys
  become: true
  become_user: root
  tags: ssh_keys
  ansible.builtin.file:
    path: "/tmp/ssh-keys"
    state: directory
    owner: "root"
    group: "root"
    mode: "0700"
  
- name: Check if ssh-keys exist on target host
  become: true
  become_user: root
  tags: ssh_keys
  ansible.builtin.stat:
    path: "{{ user_info.home }}/.ssh/id_rsa"
  register: sk_exist_local

- name: Check if ssh-keys for host exist in central store
  tags: ssh_keys
  ansible.builtin.stat:
    path: "{{ common_central_store }}/{{ common_full_hostname }}-{{ common_user_sk }}-id_rsa"
  register: sk_exist_central
  
- name: Generate ssh-keys for user
  become: true
  become_user: root
  tags: ssh_keys
  when: not sk_exist_local.stat.exists and not sk_exist_central.stat.exists
  community.crypto.openssh_keypair:
    path: "/tmp/ssh-keys/{{ common_full_hostname }}-{{ common_user_sk }}-id_rsa"
    size: 2048
    state: present
    type: rsa
    mode: "0600"
  delegate_to: 127.0.0.1

- name: Copy exist keys from central store
  when: not sk_exist_local.stat.exists and sk_exist_central.stat.exists
  tags: ssh_keys
  ansible.builtin.fetch:
    dest: "/tmp/ssh-keys/"
    src: "{{ common_central_store }}/{{ common_full_hostname }}-{{ common_user_sk }}-id_rsa"
    flat: true
    mode: "0600"

- name: Copy exist keys from target host to temp local dir
  when: sk_exist_local.stat.exists and not sk_exist_central.stat.exists
  tags: ssh_keys
  ansible.builtin.fetch:
    dest: "/tmp/ssh-keys/"
    src: "{{ common_central_store }}/{{ common_full_hostname }}-{{ item.item.name }}-id_rsa"
    flat: true
    mode: "0600"
  loop: "{{ sk_exist_local.results }}"
  
- name: Copy ssh-keys to target hosts
  tags: ssh_keys
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ user_info.home }}/.ssh/{{ item | basename | regex_replace(common_full_hostname + '-' + common_user_sk + '-', '') }}"
    owner: "{{ common_user_sk }}"
    mode: "0600"
  with_fileglob: '/var/tmp/{{ common_full_hostname }}-{{ common_user_sk }}-id_rsa*'

- name: Create authorized key for user
  tags: ssh_keys
  ansible.posix.authorized_key:
    user: "{{ common_user_sk }}"
    state: present
    key: "{{ lookup('ansible.builtin.file', item) }}"
  with_fileglob: '/var/tmp/*id_rsa.pub'

- name: Create known_hosts for 
  tags: ssh_keys
  ansible.builtin.known_hosts:
    hash_host: true
    path: "{{ user_info.home }}/.ssh/known_hosts"
    name: "{{ hostvars[item.0][item.1] }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + hostvars[item.0][item.1]) }}"
    state: present
  loop: "{{ groups[common_sk_hosts_group] | product(['common_short_hostname', 'common_ip4_default', 'common_full_hostname']) }}"

- name: Set owner group and mode for known_hosts file
  tags: ssh_keys
  ansible.builtin.file:
    path: "{{ user_info.home }}/.ssh/known_hosts"
    owner: "{{ common_user_sk }}"
    mode: "0600"

- name: Remove temp dir for create ssh keys
  tags: ssh_keys
  ansible.builtin.file:
    path: "/tmp/ssh-keys"
    state: absent
